name: respond-to-jargon-webhooks
on: [repository_dispatch]


env:
  ARTEFACT_DIR: jargon/

jobs:
  
  get-jargonArtefacts:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: mkdir -p ${{ env.ARTEFACT_DIR }}
      - uses: actions/setup-python@v2
      - uses: jannekem/run-python-script-action@v1
        with:
          script: |
            import urllib.request
            import json

            def download(url, fileName):
              try:
                urllib.request.urlretrieve(url, '${{ env.ARTEFACT_DIR }}' + fileName)
              except:
                print('Failed to download: ' + url)

            # Parse the Json Webhook from Jargon
            jsonObj = json.loads("""${{ toJSON(github.event.client_payload) }}""")

            # Determine if this was a Release, or Snapshot
            onRelease = False
            if jsonObj['action']['name'] == "onRelease": onRelease = True

            if "test" in jsonObj['action']:
              # Do nothing for test runs
              print('Running in test mode. Exiting')
            else:
              # Download the artefacts
              artefacts = jsonObj['artefacts']
              for artefactType in artefacts:
                if artefactType == 'lifeCycles':
                  lifeCycles = artefacts['lifeCycles']
                  for cycle in lifeCycles:
                    download(cycle['url'], cycle['fileName'])
                else:
                  artefact = artefacts[artefactType]
                  download(artefact['url'], artefact['fileName'])
                  
      # Commit and push all changed files.
      - name: Commit & Push
        if: ${{ github.event.client_payload.action.test }} == undefined 
        run: |
          git config --global user.name "Jargon Webhook"
          git config --global user.email "username@users.noreply.github.com"
          git commit -a -m "Update ${{ github.event.client_payload.domain.account}}/${{ github.event.client_payload.domain.name }} from Jargon to version ${{ github.event.client_payload.release.version }}"
          git push
